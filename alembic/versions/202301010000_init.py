"""init

Revision ID: 202301010000
Revises: 
Create Date: 2023-01-01 00:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column
from sqlalchemy import Integer, String, Boolean, Numeric
from passlib.context import CryptContext

from app.config import settings

# revision identifiers, used by Alembic.
revision = '202301010000'
down_revision = None
branch_labels = None
depends_on = None

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'users',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('email', sa.String(), nullable=False),
        sa.Column('hashed_password', sa.String(), nullable=False),
        sa.Column('full_name', sa.String(), nullable=True),
        sa.Column('is_admin', sa.Boolean(), nullable=True, default=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)

    op.create_table(
        'accounts',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('balance', sa.Numeric(10, 2), nullable=True, default=0),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_accounts_id'), 'accounts', ['id'], unique=False)

    op.create_table(
        'payments',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('transaction_id', sa.String(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('account_id', sa.Integer(), nullable=False),
        sa.Column('amount', sa.Numeric(10,2), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()')),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_payments_id'), 'payments', ['id'], unique=False)
    op.create_index(op.f('ix_payments_transaction_id'), 'payments', ['transaction_id'], unique=True)
    # ### end Alembic commands ###

    # Foreign keys
    op.create_foreign_key("fk_accounts_user_id", "accounts", "users", ["user_id"], ["id"], ondelete="CASCADE")
    op.create_foreign_key("fk_payments_user_id", "payments", "users", ["user_id"], ["id"], ondelete="CASCADE")
    op.create_foreign_key("fk_payments_account_id", "payments", "accounts", ["account_id"], ["id"], ondelete="CASCADE")

    # Создаем тестового пользователя и администратора
    # Используем "bulk_insert" или простую вставку
    user_table = table('users',
        column('id', Integer),
        column('email', String),
        column('hashed_password', String),
        column('full_name', String),
        column('is_admin', Boolean),
    )

    # Хешируем пароли из настроек
    admin_pass = pwd_context.hash(settings.ADMIN_PASSWORD)
    user_pass = pwd_context.hash(settings.USER_PASSWORD)

    op.bulk_insert(
        user_table,
        [
            {
                "id": 1,
                "email": settings.ADMIN_EMAIL,
                "hashed_password": admin_pass,
                "full_name": "Super Admin",
                "is_admin": True
            },
            {
                "id": 2,
                "email": settings.USER_EMAIL,
                "hashed_password": user_pass,
                "full_name": "Test User",
                "is_admin": False
            },
        ]
    )

    # Создаем для пользователя счёт
    account_table = table('accounts',
        column('id', Integer),
        column('user_id', Integer),
        column('balance', Numeric),
    )

    op.bulk_insert(
        account_table,
        [
            {
                "id": 1,
                "user_id": 2,
                "balance": 50
            }
        ]
    )


def downgrade():
    op.drop_table('payments')
    op.drop_table('accounts')
    op.drop_table('users')